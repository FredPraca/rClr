<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    string[] methodParameters = new string[]{
    "object obj","string x","double x","float x","int x","bool x","DateTime x","byte x", "char x",
    "object obj1, object obj2","string x1, string x2","double x1, double x2","float x1, float x2","int x1, int x2","bool x1, bool x2","DateTime x1, DateTime x2","byte x1, byte x2", "char x1, char x2",
    "object[] obj","string[] x","double[] x","float[] x","int[] x","bool[] x","DateTime[] x","byte[] x", "char[] x",
    "object[,] obj","string[,] x","double[,] x","float[,] x","int[,] x","bool[,] x","DateTime[,] x","byte[,] x", "char[,] x",
    "object[][] obj","string[][] x","double[][] x","float[][] x","int[][] x","bool[][] x","DateTime[][] x","byte[][] x", "char[][] x",
    // Let's pay particular attention to strings, as there is an odd behavior with the MS CLR hosting API, inconsistent with other value types.
    "double x, string y", "double x, string y, string z", "double x, string[] y",
    "string x, string[] y", "string[] x, string y", "string[] x, string[] y"
    };
#>
using System;
using System.Reflection;
using Rclr;

namespace Rclr
{
    /// <summary>
    /// Do not modify the .cs file: T4 generated class to support the unit tests for method binding
    /// </summary>
    public class TestMethodBinding : ITestMethodBindings
    {
<#
foreach (var item in methodParameters)
{
#>
        public static string[] SomeStaticMethod(<#=item#>) { return ReflectionHelper.GetMethodParameterTypes(MethodBase.GetCurrentMethod()); }
        public string[] SomeInstanceMethod(<#=item#>) { return ReflectionHelper.GetMethodParameterTypes(MethodBase.GetCurrentMethod()); }
        string[] ITestMethodBindings.SomeExplicitlyImplementedMethod(<#=item#>) { return ReflectionHelper.GetMethodParameterTypes(MethodBase.GetCurrentMethod()); }
<#
} // end foreach
#>
    }

    public interface ITestMethodBindings
    {
<#
foreach (var item in methodParameters)
{
#>
        string[] SomeExplicitlyImplementedMethod(<#=item#>);
<#
} // end foreach
#>
    }
}
